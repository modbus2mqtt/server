#
name: Create and publish a Docker image

# Configures this workflow to run every time a change is pushed to the branch called `release`.
on:
#  push:
#    branches: ['main']
  workflow_dispatch:
    inputs:
      version_number:
        description: Version number <patch|minor| version number(E.g. 1.0.0) see npm version> An empty version number doesn't change the version
        default: ''
      job:
        type: choice
        description: Select job to execute
        options: 
        - npm_publish
        - docker
        - all
        default: 'all'
        
# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: modbus2mqtt/modbus2mqtt

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  npm_publish:
    if: ${{ ( (inputs.job == 'npm_publish')|| (inputs.job == 'all') ) && ( inputs.version_number != '' )}}
    environment: release 
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    outputs:
      tag:  ${{steps.set-tag.outputs.tag}}
      version:  ${{steps.set-tag.outputs.version}}
      change_log: ${{steps.store_changelog.outputs.change_log}}
      release_exists: ${{steps.set-tag.outputs.release_exists}}
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: set package version number for update NPM version
        id: set-tag
        run: |
          set -e
          git config --global user.email "noreply@carcam360.de" 
          git config --global user.name "Workflow User"
          #version="$(npm version ${{ inputs.version_number }} )"
          version=0.16.41
          echo "tag=v$version" >>$GITHUB_OUTPUT
          echo "version=$version" >>$GITHUB_OUTPUT
          git push
          minor=$(echo $version| sed -e 's/\([0-9]*\)\.\([0-9]*\)\..*/\2/g')
          major=$(echo $version| sed -e 's/\([0-9]*\)\.\([0-9]*\)\..*/\1/g')
          echo minor $minor
          echo major $major
          if [[ "$version" =~ \.0$ ]]; then  
            since="v$major.$(expr $minor - 1)"  
          else
            since="v$major.$minor" 
          fi
          since_tag=$(git tag| grep "$since"| sort -n| head -1)
          echo since_tag=$since_tag >>$GITHUB_OUTPUT 
          if [[ "$(gh release view $tag 2>&1)" == "release not found" ]]; then
            echo "release_exists=false" >> $GITHUB_OUTPUT
          else
            echo "Release found."
            echo "release_exists=true" >> $GITHUB_OUTPUT
          fi
         
      - name: '✏️ Generate changelog History'
        uses: heinrichreimer/action-github-changelog-generator@v2.4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          output: CHANGELOG.md
          headerLabel: '## Changelog for Modbus <=> MQTT'
      - name: Archive CHANGELOG.md
        uses: actions/upload-artifact@v4
        with:
          name: CHANGELOG.md
          path: CHANGELOG.md
          retention-days: 1
      - name: '✏️ Generate changelog for release'
        id: release_changes
        if: ${{ steps.set-tag.outputs.since_tag != '' }} 
        uses: heinrichreimer/action-github-changelog-generator@v2.4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          sinceTag: ${{ steps.set-tag.outputs.since_tag }}
          headerLabel: "## Changes since Release ${{ steps.set-tag.outputs.since_tag }}"
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        if: ${{ ! steps.set-tag.outputs.release_exists }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.set-tag.outputs.tag }}
          release_name: Release ${{ steps.set-tag.outputs.tag }}
          body: |
            ${{steps.release_changes.outputs.changelog || '## First Release'}}
          draft: false
          prerelease: false
      - name: Set up Node.js
        uses: actions/setup-node@v6
        with:
          node-version: 20.x
          registry-url: 'https://registry.npmjs.org'
          always-auth: true
          token: ${{ secrets.NPMJS }}

      - name: NPM install
        if: ${{ ! steps.set-tag.outputs.release_exists }}
        id: npminstall
        run: |
          npm ci 
          npm run build
          npm set registry https://registry.npmjs.org/
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPMJS }}
  docker:
    if: ${{ ( (inputs.job == 'docker')|| (inputs.job == 'all') ) && ( inputs.version_number != '' ) }}
    runs-on: ubuntu-latest
    environment: release
    needs: npm_publish
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          repository: modbus2mqtt/hassio-addon-repository
          ref: refs/heads/main
          token: ${{ secrets.PAT }}
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Prepare Addon Directory
        id: releaseAddon
        run: |
          if echo ${{needs.npm_publish.outputs.tag }} | grep -e '\.0$' >/dev/null
          then
             latest=""
          else
             latest=".latest"
          fi
          echo "latest=$latest" >>$GITHUB_OUTPUT
          componentdir="modbus2mqtt$latest/docker/rootfs/usr/app"
          "bin/releaseAddon.py" --componentdir "$componentdir" >>$GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}${{steps.releaseAddon.outputs.latest}}
          labels: org.opencontainers.image.version=${{needs.npm_publish.outputs.tag}}
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          platforms: linux/amd64,linux/arm64
          context: modbus2mqtt${{steps.releaseAddon.outputs.latest}}/docker
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}${{steps.releaseAddon.outputs.latest}}:${{needs.npm_publish.outputs.version}}
          labels: ${{ steps.meta.outputs.labels }}
        env:
          BUILDX_NO_DEFAULT_ATTESTATIONS: 1
      - name: Download CHANGELOG.md
        uses: actions/download-artifact@v5
        with:
          name: CHANGELOG.md
      - name: Checkin hassio-addon-repository
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: ${{needs.npm_publish.outputs.version}}
  

