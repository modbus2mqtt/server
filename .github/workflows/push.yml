#
name: Create and publish a Docker image

# Configures this workflow to run every time a change is pushed to the branch called `release`.
on:
  push:
    branches: ['main', 'release']
  workflow_dispatch:
    inputs:
      component:
        type: choice
        description: Select component
        options:
          - server
          - specification
          - angular

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: modbus2mqtt/modbus2mqtt

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  init:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4
      - name: '✏️ Generate changelog'
        uses: heinrichreimer/action-github-changelog-generator@v2.4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          output: CHANGELOG.md
          headerLabel: '# Changelog for ${{github.event.repository.name}}'
      - name: Checkin CHANGELOG.md 
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: Update CHANGELOG.md
          add_options: '-u'
      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 20.x
      - name: NPM install
        id: npminstall
        run: |
          npm ci 
          npm run build
          npm shrinkwrap
          archivename=$( npm pack | tail -1)
          mv $archivename server.tgz
          echo pkgname=$(echo $archivename | sed -e 's/\(.*\)-[^-]*$/\1/g') >> $GITHUB_OUTPUT
          echo pkgversion=$(echo $archivename | sed -e 's/.*-\([^-]*\)$/\1/g' )  >> $GITHUB_OUTPUT
          echo archivename=$archivename >> $GITHUB_OUTPUT
      - name: Archive node_modules directory artifacts
        uses: actions/upload-artifact@v4
        with:
          name: server
          path: server.tgz
          retention-days: 1
          include-hidden-files: true
  release:
    runs-on: ${{matrix.platform}}
    environment: release
    strategy:
      matrix:
        platform: [ubuntu-latest, ubuntu-22.04-arm]
    needs: init
    outputs:
      version: ${{steps.prepareAddonDirectory.outputs.TAG_NAME}}
      angular_version: ${{steps.prepareAddonDirectory.outputs.ANGULAR_VERSION}}
      specification_version: ${{steps.prepareAddonDirectory.outputs.SPECIFICATION_VERSION}}
      latest: ${{steps.releasecheck.outputs.latest}}
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Platform check
        id: platformcheck
        run: if [ ${{matrix.platform}} == 'ubuntu-22.04-arm' ]; then echo "platform=arm64"; else echo "platform=amd64";fi >> $GITHUB_OUTPUT
      - name: Release Check
        id: releasecheck
        run: if [ ${{github.ref_name}} != 'release' ]; then echo "latest=.latest"; else echo "latest=";fi >> $GITHUB_OUTPUT
      - uses: actions/checkout@v4
        with:
          repository: modbus2mqtt/hassio-addon-repository
          ref: refs/heads/main
          token: ${{ secrets.PAT }}

      - name: 'create rootfs/usr/app directory'
        run: mkdir -p "modbus2mqtt${{steps.releasecheck.outputs.latest}}/docker/rootfs/usr/app"
      - name: load artifact server
        uses: actions/download-artifact@v4
        with:
          name: server
          path: modbus2mqtt${{steps.releasecheck.outputs.latest}}/docker/rootfs/usr/app
      - name: extract server.tgz into /usr/app
        run: |
          cd modbus2mqtt${{steps.releasecheck.outputs.latest}}/docker/rootfs/usr/app
          tar xf server.tgz
          mv package/* .
          rm server.tgz
      - name: npm ci
        run: npm ci --production
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Set COMPONENT variables
        run: |
          if [ "${{ inputs.component }}" != "" ];then echo "COMPONENT=${{ inputs.component }}">> $GITHUB_ENV;else  echo "COMPONENT=${{ github.event.repository.name }}" >> $GITHUB_ENV;fi
          echo "COMPONENT = $COMP"
      - name: Prepare Addon Directory
        id: prepareAddonDirectory
        run: |
          ./bin/releaseAddon.py --ref ${{github.ref}} --pkgjson "modbus2mqtt${{steps.releasecheck.outputs.latest}}/docker/rootfs/usr/app/node_modules/../$COMPONENT" >>$GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}${{steps.releasecheck.outputs.latest}}-${{steps.platformcheck.outputs.platform}}
          labels: org.opencontainers.image.version=${{steps.prepareAddonDirectory.outputs.TAG_NAME}}
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          platforms: linux/${{steps.platformcheck.outputs.platform}}
          context: modbus2mqtt${{steps.releasecheck.outputs.latest}}/docker
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}${{steps.releasecheck.outputs.latest}}-${{steps.platformcheck.outputs.platform}}:${{steps.prepareAddonDirectory.outputs.TAG_NAME}}
          labels: ${{ steps.meta.outputs.labels }}
        env:
          BUILDX_NO_DEFAULT_ATTESTATIONS: 1
      - name: Copy CHANGELOG.md
        run: |
          cd modbus2mqtt${{steps.releasecheck.outputs.latest}}
          cp modbus2mqtt${{steps.releasecheck.outputs.latest}}/docker/rootfs/usr/app/CHANGELOG.md CHANGELOG.md
          cd -
      - name: Checkin hassio-addon-repository
        if: ${{steps.platformcheck.outputs.platform == 'arm64' }}
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          tagging_message: ${{steps.prepareAddonDirectory.outputs.TAG_NAME}}
          commit_message: ${{steps.prepareAddonDirectory.outputs.TAG_NAME}}
  docker-tag:
    if: always()
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    needs: release
    steps:
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Test
        env:
          VERSION: ${{needs.release.outputs.version}}
        run: |
          docker buildx imagetools create -t ghcr.io/modbus2mqtt/modbus2mqtt${{needs.release.outputs.latest}}:${{env.VERSION}} ghcr.io/modbus2mqtt/modbus2mqtt${{needs.release.outputs.latest}}-arm64:${{env.VERSION}} ghcr.io/modbus2mqtt/modbus2mqtt${{needs.release.outputs.latest}}-amd64:${{env.VERSION}}
          docker buildx imagetools create -t ghcr.io/modbus2mqtt/modbus2mqtt${{needs.release.outputs.latest}}:latest ghcr.io/modbus2mqtt/modbus2mqtt${{needs.release.outputs.latest}}-arm64:${{env.VERSION}} ghcr.io/modbus2mqtt/modbus2mqtt${{needs.release.outputs.latest}}-amd64:${{env.VERSION}}
